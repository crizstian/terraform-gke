version: "3"

dotenv: ["./env/.selatam"]
env:
  TF_VAR_harness_platform_api_key: $HARNESS_PLATFORM_API_KEY
  TF_VAR_harness_platform_account_id: $HARNESS_ACCOUNT_ID
  # CONFIG: '{{.CONFIG | default "."}}'

vars:
  TF_DIR: provision
  TF_DIR_FLAG: -chdir={{.TF_DIR}}
  TF_ARGS: |
    -var-file=./tfvars/$workspace/vars.tfvars

# ──────────────────────────────────────────────────────────────────────────────
tasks:
  default:
    silent: true
    cmds:
      - task --list
  # ──────────────────────────────────────────────────────────────────────────────
  gcp:
    desc: GCP Authentication
    summary: Generate SA GCP Authentication
    aliases: [gcp, auth]
    cmds:
      - cmd: gcloud auth application-default login
  # ──────────────────────────────────────────────────────────────────────────────
  terraform:
    desc: Terraform execute
    summary: full terraform initialization
    aliases: [tf]
    cmds:
      - task: terraform-clean
      - task: terraform-init
      - task: terraform-plan
      - task: terraform-apply
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-clean:
    desc: Remove terraform directories
    summary: removal of downloaded terraform modules
    aliases: [tfc, tf-clean, tfclean]
    cmds:
      - cmd: rm -rf {{.TF_DIR}}/.terraform*
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-init:
    desc: Terraform initialization
    summary: terraform init
    aliases: [tfi, tf-init, tfinit]
    deps: [terraform-clean]
    cmds:
      - cmd: terraform {{.TF_DIR_FLAG}} init -backend-config="bucket={{.GCS_BUCKET}}" -backend-config="prefix={{.GCS_PREFIX}}"
      - cmd: terraform {{.TF_DIR_FLAG}} workspace select $workspace || terraform {{.TF_DIR_FLAG}} workspace new $workspace
    preconditions:
      - sh: terraform --version
        msg: "`terraform` binary was not found in PATH"
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-plan:
    desc: Terraform plan
    summary: Terraform plan
    aliases: [tfp, tf-plan, tfplan]
    deps: [terraform-init]
    cmds:
      - cmd: |
          terraform {{.TF_DIR_FLAG}} plan {{.TF_ARGS}}
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-apply:
    desc: Terraform apply
    summary: Terraform apply
    aliases: [tfa, tf-apply, tfapply]
    deps: [terraform-init]
    cmds:
      - cmd: terraform {{.TF_DIR_FLAG}} apply -auto-approve {{.TF_ARGS}}
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-destroy:
    desc: Terraform Destroy
    summary: Terraform Destroy
    aliases: [tfd, tf-destroy, tfdestroy]
    deps: [terraform-init]
    cmds:
      - cmd: terraform {{.TF_DIR_FLAG}} destroy -auto-approve {{.TF_ARGS}}
  # ──────────────────────────────────────────────────────────────────────────────
  terraform-show:
    desc: Terraform Show
    summary: Terraform Show
    aliases: [tfs, tf-show, tfshow]
    deps: [terraform-init]
    cmds:
      - cmd: terraform {{.TF_DIR_FLAG}} show
  # ──────────────────────────────────────────────────────────────────────────────
  # tfcost:
  #   desc: infracost - Generate cost estimates from Terraform
  #   summary: infracost - Generate cost estimates from Terraform
  #   cmds:
  #     - infracost breakdown --usage-file infracost-usage.yml --path . --terraform-plan-flags "-var-file=terraform.tfvars"
  # ──────────────────────────────────────────────────────────────────────────────
  tflint:
    desc: tflint - A Pluggable Terraform Linter
    summary: tflint - A Pluggable Terraform Linter
    aliases: [tfl, tf-lint, tflint]
    dir: $STACK
    cmds:
      - tflint --init
      - tflint --config=.tflint.hcl -{{.TF_ARGS}} .
  # ──────────────────────────────────────────────────────────────────────────────
  # tfsec:
  #   desc: tfsec - a simple tool to detect potential security vulnerabilities in your terraformed infrastructure.
  #   summary: tfsec - a simple tool to detect potential security vulnerabilities in your terraformed infrastructure.
  #   dir: $STACK
  #   cmds:
  #     - tfsec . --tfvars-file terraform.tfvars
  # ──────────────────────────────────────────────────────────────────────────────
  # tfdrift:
  #   desc: Catch infrastructure drift
  #   summary: |
  #     driftctl is a free and open-source CLI that warns of infrastructure drift and fills in the missing piece in your DevSecOps toolbox.
  #   cmds:
  #     - driftctl scan
  #   ignore_error: true
  # ──────────────────────────────────────────────────────────────────────────────
  # terraform-docs:
  #   desc: Update Terraform docs
  #   summary: Update Terraform docs
  #   cmds:
  #     # - cmd: powershell -c 'Copy-Item README.md README.bak.{{now | date "2006-01-02-15-04-05"}}.md'
  #     #   platforms: [windows]
  #     - cmd: terraform-docs markdown --config .terraform-docs.yml --output-file README.md .
  #   preconditions:
  #     - sh: terraform-docs --version
  #       msg: "`terraform-docs` binary was not found in PATH"
  # ──────────────────────────────────────────────────────────────────────────────
  # terraform-fmt:
  #   desc: Format Terraform files
  #   summary: Format Terraform files
  #   aliases: [tf-fmt,tffmt,fmt-terraform]
  #   cmds:
  #     - cmd: powershell -c '$files=(git ls-files --exclude-standard); foreach ($file in $files) { if ((get-item $file).Extension -in ".tf", ".tfvars") { terraform fmt -write=true $file } }'
  #       platforms: [windows]
  #   preconditions:
  #     - sh: terraform --version
  #       msg: "`terraform` binary was not found in PATH"
  #     - sh: git --version
  #       msg: "`git` binary was not found in PATH"
  # ──────────────────────────────────────────────────────────────────────────────
  # terraform-validate:
  #   desc: Terraform validate
  #   summary: Terraform validate
  #   aliases: [tfv,tf-validate,tfvalidate,validate-terraform]
  #   cmds:
  #     - cmd: terraform validate
  #   preconditions:
  #     - sh: terraform --version
  #       msg: "`terraform` binary was not found in PATH"
  # ──────────────────────────────────────────────────────────────────────────────
